name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  CACHE_KEY: node-modules-${{ hashFiles('**/package-lock.json') }}

jobs:
  # Quality checks and testing
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code
        run: npm run lint
        
      - name: Type check
        run: npx tsc --noEmit
        
      - name: Run tests
        run: npm run test
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/lcov.info
          
  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
  # Performance and bundle analysis
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Run bundle size check
        run: npm run size-check
        
      - name: Run performance check
        run: node scripts/performance-check.js
        
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            dist/stats.html
            performance-report.json
            
      - name: Comment PR with bundle size
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const report = JSON.parse(fs.readFileSync('performance-report.json', 'utf8'));
              
              const comment = `## 📊 Performance Report
              
              ### Bundle Size Analysis
              - **Main Bundle**: ${(report.metrics['main-bundle-size'] / 1024).toFixed(1)}KB
              - **Vendor Bundle**: ${(report.metrics['vendor-bundle-size'] / 1024).toFixed(1)}KB
              - **Total Size**: ${(report.metrics['total-bundle-size'] / 1024).toFixed(1)}KB
              
              ### Lighthouse Scores
              - **Performance**: ${report.metrics['performance-score']}/100
              - **Accessibility**: ${report.metrics['accessibility-score']}/100
              - **Best Practices**: ${report.metrics['best-practices-score']}/100
              - **SEO**: ${report.metrics['seo-score']}/100
              
              ${report.errors.length > 0 ? '### ❌ Budget Violations\n' + report.errors.map(e => `- ${e}`).join('\n') : ''}
              ${report.warnings.length > 0 ? '### ⚠️ Warnings\n' + report.warnings.map(w => `- ${w}`).join('\n') : ''}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not create performance comment:', error.message);
            }
            
  # Accessibility testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start preview server
        run: npm run preview &
        
      - name: Wait for server
        run: sleep 10
        
      - name: Run accessibility tests
        run: |
          npx @axe-core/cli http://localhost:4173 \
            --exit \
            --save accessibility-report.json \
            --tags wcag2a,wcag2aa,wcag21aa
            
      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: accessibility-report.json
          
  # Build and deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, security, performance, accessibility]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for staging
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.STAGING_API_URL }}
          VITE_SOCKET_URL: ${{ secrets.STAGING_SOCKET_URL }}
          VITE_ENVIRONMENT: staging
          
      - name: Deploy to staging
        run: |
          # Add your staging deployment commands here
          echo "Deploying to staging environment..."
          # Example: rsync, AWS S3, Netlify, etc.
          
  # Build and deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, security, performance, accessibility]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_SOCKET_URL: ${{ secrets.PRODUCTION_SOCKET_URL }}
          VITE_ENVIRONMENT: production
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          
      - name: Run final security scan
        run: npm audit --audit-level=high
        
      - name: Deploy to production
        run: |
          # Add your production deployment commands here
          echo "Deploying to production environment..."
          # Example: AWS S3, CloudFront invalidation, etc.
          
      - name: Notify deployment
        if: success()
        run: |
          # Send deployment notification
          echo "Production deployment successful!"
          # Add Slack, Discord, or email notifications here