# Docker Compose configuration for Modern PNR Frontend
# Supports development, testing, and production environments

version: '3.8'

services:
  # =============================================================================
  # Development Environment
  # =============================================================================
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_SOCKET_URL=ws://localhost:8000
      - VITE_ENVIRONMENT=development
      - VITE_DEV_TOOLS=true
    networks:
      - pnr-network
    profiles:
      - development

  # =============================================================================
  # Production Environment
  # =============================================================================
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_URL=${VITE_API_URL:-https://api.pnrtracker.com}
        - VITE_SOCKET_URL=${VITE_SOCKET_URL:-wss://api.pnrtracker.com}
        - VITE_ENVIRONMENT=production
        - VITE_BUILD_VERSION=${BUILD_VERSION:-1.0.0}
        - VITE_BUILD_TIMESTAMP=${BUILD_TIMESTAMP}
    ports:
      - "80:8080"
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - pnr-network
    profiles:
      - production

  # =============================================================================
  # Testing Environment
  # =============================================================================
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    environment:
      - NODE_ENV=test
      - CI=true
    volumes:
      - ./coverage:/app/coverage
      - ./test-results:/app/test-results
    networks:
      - pnr-network
    profiles:
      - testing

  # =============================================================================
  # Nginx Load Balancer (for production scaling)
  # =============================================================================
  nginx-lb:
    image: nginx:1.25-alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - app-prod
    restart: unless-stopped
    networks:
      - pnr-network
    profiles:
      - production-lb

  # =============================================================================
  # Monitoring and Observability
  # =============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - pnr-network
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - pnr-network
    profiles:
      - monitoring

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - pnr-network
    profiles:
      - monitoring

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - pnr-network
    profiles:
      - monitoring

  # =============================================================================
  # Security Scanning
  # =============================================================================
  
  # Trivy for vulnerability scanning
  trivy:
    image: aquasec/trivy:latest
    volumes:
      - .:/workspace
      - trivy-cache:/root/.cache/trivy
    command: 
      - filesystem
      - --exit-code=1
      - --severity=HIGH,CRITICAL
      - /workspace
    profiles:
      - security

# =============================================================================
# Networks
# =============================================================================
networks:
  pnr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  trivy-cache:
    driver: local

# =============================================================================
# Development Override
# =============================================================================
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up
# This file can be created for local development overrides